library ieee;
use ieee.std_logic_1164.all;

entity brent_kung_adder_32 is
    port (a,b: in std_logic_vector(31 downto 0);
	       c : in std_logic;
			 sum : out std_logic_vector(31 downto 0);
			 cout : out std_logic);		 
end entity;

architecture trivial of brent_kung_adder_32 is 

signal carry : std_logic_vector(32 downto 1);
 
component andgate 
port (A, B: in std_logic; 
      prod: out std_logic);
end component andgate;

component xorgate 
port (A, B: in std_logic;
      uneq: out std_logic);
end component xorgate;

component abcgate 
port (A, B, C: in std_logic;
      abc: out std_logic);
end component;

component Cin_map_G 
port(A, B, Cin: in std_logic;
     Bit0_G: out std_logic);
end component Cin_map_G;

signal G1, P1 :  std_logic_vector(31 downto 0);
signal G2, P2 :  std_logic_vector(15 downto 0);
signal G3, P3 :  std_logic_vector(7 downto 0);
signal G4, P4 :  std_logic_vector(3 downto 0);
signal G5, P5 :  std_logic_vector(1 downto 0);
signal G6, P6 :  std_logic;
begin

G1_0: abcgate port map (a(0), b(0), c, G1(0));

s1: for i in 31 downto 1 generate
 G1_i : andgate port map (a(i), b(i), G1(i));
end generate s1;

s2 : for i in 31 downto 0 generate
 P1_i: xorgate port map(a(i), b(i), P1(i));
end generate s2;

s3: for i in 15 downto 0 generate
 G2_i: abcgate port map (G1((2*i)+1), P1((2*i)+1), G1(2*i), G2(i));
end generate s3; 

s4 : for i in 15 downto 0 generate
 P2_i: andgate port map (P1((2*i)+1), P1(2*i), P2(i));
end generate s4;

s5 : for i in 7 downto 0 generate
 G3_i: abcgate port map (G2((2*i)+1), P2((2*i)+1), G2((2*i)), G3(i));
end generate s5; 

s6 : for i in 7 downto 0 generate
 P3_i: andgate port map (P2((2*i)+1), P2((2*i)), P3(i));
end generate s6;

s7 : for i in 3 downto 0 generate
 G4_i: abcgate port map (G3((2*i)+1), P3((2*i)+1), G3((2*i)), G4(i));
end generate s7; 

s8 : for i in 3 downto 0 generate
 P4_i: andgate port map (P3((2*i)+1), P3((2*i)), P4(i));
end generate s8;

s9 : for i in 1 downto 0 generate
 G5_i: abcgate port map (G4((2*i)+1), P4((2*i)+1), G4((2*i)), G5(i));
end generate s9; 

s10 : for i in 1 downto 0 generate
 P5_i: andgate port map (P4((2*i)+1), P4((2*i)), P5(i));
end generate s10;

G6_i: abcgate port map (G5(1), P5(1), G5(0), G6);
P6_i : andgate port map (P5(1), P5(0), P6);

carry(1) <= G1(0);
carry(2) <= G2(0);
carry_3: abcgate port map (G1(2), P1(2), carry(2), carry(3));
carry(4) <= G3(0);
carry_5: abcgate port map (G1(4), P1(4), carry(4), carry(5));
carry_6: abcgate port map (G2(2), P2(2), carry(4), carry(6));
carry_7: abcgate port map (G1(6), P1(6), carry(6), carry(7));
carry(8) <= G4(0);
carry_9: abcgate port map (G1(8), P1(8), carry(8), carry(9));
carry_10: abcgate port map (G2(4), P2(4), carry(8), carry(10));
carry_11: abcgate port map (G1(10), P1(10), carry(10), carry(11));
carry_12: abcgate port map (G3(2), P3(2), carry(8), carry(12));
carry_13: abcgate port map (G1(12), P1(12), carry(12), carry(13));
carry_14: abcgate port map (G2(6), P2(6), carry(12), carry(14));
carry_15: abcgate port map (G1(14), P1(14), carry(14), carry(15));
carry(16) <= G5(0);
carry_17: abcgate port map (G1(16), P1(16), carry(16), carry(17));
carry_18: abcgate port map (G2(8), P2(8), carry(16), carry(18));
carry_19: abcgate port map (G1(18), P1(18), carry(18), carry(19));
carry_20: abcgate port map (G3(4), P3(4), carry(16), carry(20));
carry_21: abcgate port map (G1(20), P1(20), carry(20), carry(21));
carry_22: abcgate port map (G2(10), P2(10), carry(20), carry(22));
carry_23: abcgate port map (G1(22), P1(22), carry(22), carry(23));
carry_24: abcgate port map (G4(2), P4(2), carry(16), carry(24));
carry_25: abcgate port map (G1(24), P1(24), carry(24), carry(25));
carry_26: abcgate port map (G2(12), P2(12), carry(24), carry(26));
carry_27: abcgate port map (G1(26), P1(26), carry(26), carry(27));
carry_28: abcgate port map (G3(6), P3(6), carry(24), carry(28));
carry_29: abcgate port map (G1(28), P1(28), carry(28), carry(29));
carry_30: abcgate port map (G2(14), P2(14), carry(28), carry(30));
carry_31: abcgate port map (G1(30), P1(30), carry(30), carry(31));
carry(32) <= G6;

cout <= carry(32);
sum_0 : xorgate port map (P1(0), c, sum(0));
s11 : for i in 31 downto 1 generate
 sum_i : xorgate port map (P1(i),carry(i), sum(i));
end generate s11;
 
end architecture;